if (!file.exists(file_path)) {
write.csv(df_cleaned, file_path, row.names = FALSE)
message("Archivo exportado exitosamente.")
} else {
message("El archivo ya existe. No se ha vuelto a exportar.")
}
create_hour_histogram <- function(df, variable, fill = "cornflowerblue") {
if (!(variable %in% colnames(df))) {
stop("La variable no existe en el dataframe.")
}
ggplot(df, aes_string(x = variable)) +
geom_bar(stat = "count",
fill = fill, color = "black",
position = position_dodge(width = 1)) +  # Asegura que las barras estén separadas
scale_x_continuous(breaks = seq(min(df[[variable]], na.rm = TRUE),
max(df[[variable]], na.rm = TRUE), by = 1)) +
labs(title = paste("Distribución de", variable),
x = variable, y = "Frecuencia") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
}
create_hour_histogram(data, "Sleep_Hours")
create_hour_histogram(data, "Tutoring_Sessions")
create_hour_histogram(data, "Physical_Activity")
# Supongamos que 'data' es el dataframe y 'Previous_Scores_Category' es la columna con las categorías
category_counts <- data %>%
count(Previous_Scores_Category)
# Crear gráfico de pie con ggplot
ggplot(category_counts, aes(x = "", y = n, fill = Previous_Scores_Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Distribución de las Categorías de Calificación (Previous_Scores_Category)",
x = NULL, y = NULL) +
theme_void() +
theme(legend.title = element_blank()) +
scale_fill_manual(values = c("#ff9999", "#66b3ff", "#99ff99", "#ffcc99")) +
geom_text(aes(label = paste(n, "estudiantes")),
position = position_stack(vjust = 0.5),
size = 3,  # Reducimos el tamaño de la fuente
check_overlap = TRUE)  # Asegura que no haya superposición de texto
barplot_chart_multiple <- function(df, var_names) {
plots <- list()  # Lista para almacenar los gráficos
for (var_name in var_names) {
if (!(var_name %in% colnames(df))) {
warning(paste("La variable", var_name, "no existe en el dataframe. Se omitirá."))
next
}
dist_var <- as.data.frame(table(df[[var_name]]))
colnames(dist_var) <- c(var_name, "Count")
colors <- brewer.pal(n = min(nrow(dist_var), 9), name = "Pastel1")
p <- ggplot(dist_var, aes_string(x = var_name, y = "Count", fill = var_name)) +
geom_bar(stat = "identity", color = "black") +
scale_fill_manual(values = colors) +
theme_minimal() +
labs(title = paste("Distribución de", var_name),
x = var_name,
y = "Frecuencia") +
theme(legend.position = "none")  # Ocultar leyenda
plots[[var_name]] <- p  # Guardamos el gráfico en la lista
}
if (length(plots) > 0) {
grid.arrange(grobs = plots, ncol = min(length(plots), 2))  # Ajusta columnas dinámicamente
} else {
stop("No se generaron gráficos. Verifique los nombres de las variables.")
}
}
# Agrupación de variables relacionadas con el contexto familiar y socioeconómico
family_and_socioeconomic <- c("Parental_Involvement", "Family_Income", "Parental_Education_Level", "School_Type")
# Agrupación de variables relacionadas con el acceso a recursos y actividades
student_access <- c("Access_to_Resources", "Internet_Access", "Distance_from_Home")
# Agrupación de variables relacionadas con el rendimiento y el apoyo educativo
performance_and_support <- c("Motivation_Level", "Peer_Influence", "Learning_Disabilities", "Gender", "Extracurricular_Activities")
barplot_chart_multiple(data,family_and_socioeconomic)
barplot_chart_multiple(data,student_access)
barplot_chart_multiple(data,performance_and_support)
categoric_numeric_boxplot <- function(df, cat_var, num_var) {
if (!(cat_var %in% colnames(df)) | !(num_var %in% colnames(df))) {
stop("Una o ambas variables no existen en el dataframe.")
}
color_palette <- brewer.pal(min(length(unique(df[[cat_var]])), 9), "Pastel1")
p <- ggplot(df, aes_string(x = cat_var, y = num_var, fill = cat_var)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16, outlier.size = 2) +  # Boxplot con outliers resaltados
scale_fill_manual(values = color_palette) +
theme_minimal() +
labs(title = paste("Distribución de", gsub("_", " ", num_var), "por", gsub("_", " ", cat_var)),
x = gsub("_", " ", cat_var),
y = gsub("_", " ", num_var)) +
theme(plot.title = element_text(hjust = 0.5))
print(p)
}
categoric_numeric_boxplot(data, "Parental_Involvement", "Previous_Scores")
categoric_numeric_boxplot(data, "Access_to_Resources", "Previous_Scores")
categoric_numeric_boxplot(data, "Motivation_Level", "Previous_Scores")
categoric_numeric_boxplot(data, "Extracurricular_Activities", "Previous_Scores")
categoric_numeric_boxplot(data, "School_Type", "Previous_Scores")
categoric_numeric_boxplot(data, "Gender", "Previous_Scores")
categoric_numeric_boxplot(data, "Parental_Involvement", "Exam_Score")
categoric_numeric_boxplot(data, "Access_to_Resources", "Exam_Score")
categoric_numeric_boxplot(data, "Motivation_Level", "Exam_Score")
categoric_numeric_boxplot(data, "Extracurricular_Activities", "Exam_Score")
categoric_numeric_boxplot(data, "School_Type", "Exam_Score")
categoric_numeric_boxplot(data, "Gender", "Exam_Score")
data$gender_weight <- ifelse(data$Gender == "Female", 1.37, 0.73)
create_Relation_With_Gender_Chart <- function(df, categorical_var) {
if (!(categorical_var %in% colnames(df))) {
stop("La variable principal no existe en el dataframe.")
}
if (!("Gender" %in% colnames(df))) {
stop("La variable de agrupación no existe en el dataframe.")
}
ggplot(df, aes_string(x = categorical_var, fill = "Gender", weight = "gender_weight")) +
geom_bar(position = "dodge", color = "black") +  # Usar peso para ajustar las barras
scale_fill_manual(values = c("pink", "cornflowerblue")) +
labs(title = paste("Distribución de", categorical_var, "agrupado por Gender"),
x = categorical_var,
y = "Frecuencia ponderada",
fill = "Gender") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
}
create_Relation_With_Gender_Chart(data, "Sleep_Hours")
create_Relation_With_Gender_Chart(data, "Hours_Studied")
create_Relation_With_Gender_Chart(data, "Tutoring_Sessions")
create_Relation_With_Gender_Chart(data, "Previous_Scores")
create_Relation_With_Gender_Chart(data, "Exam_Score")
stacked_barplot <- function(df, var_x, var_fill) {
if (!(var_x %in% colnames(df)) | !(var_fill %in% colnames(df))) {
stop("One or both variables do not exist in the dataframe.")
}
df[[var_x]] <- as.factor(df[[var_x]])
df[[var_fill]] <- as.factor(df[[var_fill]])
color_palette <- brewer.pal(3, "Pastel1")
p <- ggplot(df, aes_string(x = var_x, fill = var_fill)) +
geom_bar(position = "fill") +
scale_fill_manual(values = color_palette) +
theme_minimal() +
labs(title = paste("Distribution of", var_fill, "by", var_x),
x = var_x,
y = "Proportion") +
theme(plot.title = element_text(hjust = 0.5))
print(p)
}
stacked_barplot(data, "School_Type", "Parental_Involvement")
stacked_barplot(data, "School_Type", "Family_Income")
stacked_barplot(data, "School_Type", "Teacher_Quality")
stacked_barplot(data, "School_Type", "Distance_from_Home")
stacked_barplot(data, "School_Type", "Peer_Influence")
stacked_barplot(data, "School_Type", "Motivation_Level")
categoric_numeric_boxplot(data, "Distance_from_Home", "Attendance")
categoric_numeric_boxplot(data, "Access_to_Resources", "Attendance")
categoric_numeric_boxplot(data, "Family_Income", "Attendance")
categoric_numeric_boxplot(data, "Motivation_Level", "Attendance")
categoric_numeric_boxplot(data, "Peer_Influence", "Attendance")
matriz_correlacion <- cor(df_cleaned)
matriz_melt <- melt(matriz_correlacion)
ggplot(data = matriz_melt, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlación") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
labs(x = "Variables", y = "Variables", title = "Mapa de Calor de Correlación")
academic_columns <- c("Hours_Studied","Motivation_Level","Sleep_Hours", "Attendance", "Exam_Score", "Previous_Scores", "Previous_Scores_Category")
support_columns <- c("Learning_Disabilities", "Tutoring_Sessions", "Parental_Involvement")
resource_columns <- c("Family_Income", "Access_to_Resources", "Internet_Access", "Parental_Education_Level")
social_columns <- c("Extracurricular_Activities", "Physical_Activity", "Peer_Influence")
general_columns <- c(
"Hours_Studied",
"Attendance",
"Parental_Involvement",
"Access_to_Resources",
"Extracurricular_Activities",
"Sleep_Hours",
"Previous_Scores",
"Motivation_Level",
"Internet_Access",
"Tutoring_Sessions",
"Family_Income",
"Teacher_Quality",
"Peer_Influence",
"Physical_Activity",
"Learning_Disabilities",
"Parental_Education_Level",
"Distance_from_Home",
"Exam_Score"
)
df_scaled = as_tibble(scale(df_cleaned))
data_for_cluster_academic <- select(df_scaled, all_of(academic_columns))
data_for_cluster_support <- select(df_scaled, all_of(support_columns))
data_for_cluster_resource <- select(df_scaled, all_of(resource_columns))
data_for_cluster_social <- select(df_scaled, all_of(social_columns))
data_for_cluster_general <- select(df_scaled, all_of(general_columns))
compare_k <- function(df) {
print(fviz_nbclust(df, kmeans, method = "wss") +
ggtitle("Elbow Method for Optimal K"))
print(fviz_nbclust(df, kmeans, method = "silhouette") +
ggtitle("Silhouette Method for Optimal K"))
}
applying_kmeans <- function(data_for_clustering, k){
set.seed(42)
kmeans_model <- kmeans(data_for_clustering, centers = k, nstart = 25)
df_with_cluster <- as_tibble(df_cleaned)
df_with_cluster$Cluster <- as.factor(kmeans_model$cluster)
return(df_with_cluster)
}
print_clustering_results <- function(df_with_clusters, data_for_cluster, columns_to_focus){
cluster_summary <- df_with_clusters %>%
group_by(Cluster) %>%
summarise(
Num_Students = n()
)
print(ggplot(cluster_summary, aes(x = as.factor(Cluster), y = Num_Students, fill = as.factor(Cluster))) +
geom_bar(stat = "identity") +
labs(title = "Number of Students in Each Cluster", x = "Cluster", y = "Student Count") +
theme_minimal())
for (column in columns_to_focus) {
print(ggplot(df_with_clusters, aes(x = as.factor(Cluster), y = !!sym(column), fill = as.factor(Cluster))) +
geom_boxplot() +
labs(title = paste(column, "Distribution in Each Cluster"), x = "Cluster", y = column) +
theme_minimal())
}
print(fviz_cluster(list(data = data_for_cluster, cluster = df_with_clusters$Cluster),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_minimal(),
main = "Cluster Visualization (PCA Projection)"))
}
find_optimal_clusters <- function(data) {
set.seed(42)
result <- NbClust(data, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 4, method = "kmeans")
# Retorna el número óptimo de clusters sugerido
return(result)
}
compare_k(data_for_cluster_academic)
optimal_clusters_academic <- find_optimal_clusters(data_for_cluster_academic)
df_cluster_academic <- applying_kmeans(data_for_cluster_academic, 2)
print_clustering_results(df_cluster_academic, data_for_cluster_academic, academic_columns)
compare_k(data_for_cluster_support)
optimal_clusters_support <- find_optimal_clusters(data_for_cluster_support)
df_cluster_support <- applying_kmeans(data_for_cluster_support, 3)
print_clustering_results(df_cluster_support, data_for_cluster_support, support_columns)
compare_k(data_for_cluster_resource)
optimal_clusters_resources <- find_optimal_clusters(data_for_cluster_resource)
df_cluster_resource <- applying_kmeans(data_for_cluster_resource, 4)
print_clustering_results(df_cluster_resource, data_for_cluster_resource, resource_columns)
compare_k(data_for_cluster_social)
optimal_clusters_social <- find_optimal_clusters(data_for_cluster_social)
df_cluster_social <- applying_kmeans(data_for_cluster_social, 2)
print_clustering_results(df_cluster_social, data_for_cluster_social, social_columns)
compare_k(data_for_cluster_general)
optimal_clusters_general <- find_optimal_clusters(data_for_cluster_general)
df_cluster_general <- applying_kmeans(data_for_cluster_general, 2)
print_clustering_results(df_cluster_general, data_for_cluster_general, general_columns)
data_notas_altas <- df_cleaned[df_cleaned$Previous_Scores >= 8.0,]
data_notas_altas <- subset(data_notas_altas, select = -Exam_Score)
data_notas_altas
data$calificacion_categoria <- ifelse(data$Previous_Scores > 8.0, "Alta calificación", "Resto de calificaciones")
categoria_counts <- as.data.frame(table(data$calificacion_categoria))
categoria_counts$percentage <- round(100 * categoria_counts$Freq / sum(categoria_counts$Freq), 1)
ggplot(categoria_counts, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Distribución de Calificaciones en Previous Exams",
x = NULL, y = NULL) +
theme_minimal() +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5)) +
geom_text(aes(label = paste(percentage, "%")), position = position_stack(vjust = 0.5))
if ("Hours_Studied" %in% names(data_notas_altas) &
"Tutoring_Sessions" %in% names(data_notas_altas) &
"Physical_Activity" %in% names(data_notas_altas)){
data_notas_altas$Horas_Semanales_Work <- data_notas_altas$Hours_Studied +               data_notas_altas$Tutoring_Sessions
data_notas_altas <- data_notas_altas[, !(names(data_notas_altas) %in% c("Hours_Studied", "Tutoring_Sessions", "Physical_Activity"))]
} else {
print("Las columnas necesarias ya han sido eliminadas.")
}
summary(data_notas_altas$Horas_Semanales_Work)
data_numeric <- data_notas_altas[, sapply(data_notas_altas, is.numeric)]
data_scaled <- as.data.frame(scale(data_numeric))
data_notas_altas[, sapply(data_notas_altas, is.numeric)] <- data_scaled
data_notas_altas
matriz_correlacion <- cor(data_notas_altas)
matriz_melt <- melt(matriz_correlacion)
ggplot(data = matriz_melt, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlación") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
labs(x = "Variables", y = "Variables", title = "Mapa de Calor de Correlación")
model1 = lm(Horas_Semanales_Work ~ ., data = data_notas_altas)
summary(model1)
data_notas_alta_simplificado <- data_notas_altas %>% dplyr::select(-School_Type_Public, -Gender_Female)
data_notas_alta_simplificado
vif_values <- vif(lm(Horas_Semanales_Work ~ ., data = data_notas_alta_simplificado))
print(vif_values)
indices <- sample(1:nrow(data_notas_alta_simplificado), size = 0.7 * nrow(data_notas_alta_simplificado))
train_data <- data_notas_alta_simplificado[indices, ]
test_data <- data_notas_alta_simplificado[-indices, ]
#library(MASS)
#model_reduced <- stepAIC(lm(Horas_Semanales_Work ~ .^2, data = train_data), direction = "both")
#summary(model_reduced)
predicciones <- predict(model_reduced, newdata = test_data)
#library(MASS)
model_reduced <- stepAIC(lm(Horas_Semanales_Work ~ .^2, data = train_data), direction = "both")
# Distribución de Exam_Score
ggplot(df_cleaned, aes(x = Exam_Score)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.7) +
labs(title = "Distribución de Exam_Score", x = "Exam Score", y = "Frecuencia")
# Distribución de Previous_Scores
ggplot(df_cleaned, aes(x = Previous_Scores)) +
geom_histogram(bins = 20, fill = "red", alpha = 0.7) +
labs(title = "Distribución de Previous_Scores", x = "Previous Scores", y = "Frecuencia")
# Crear la variable Improved (1 si Exam_Score > Previous_Scores, 0 si no)
df_cleaned$Improved <- ifelse(df_cleaned$Exam_Score > df_cleaned$Previous_Scores, 1, 0)
# Ver distribución
table(df_cleaned$Improved)
prop.table(table(df_cleaned$Improved))
# Eliminar una de las variables dummies para evitar multicolinealidad
# Eliminar variables dummies redundantes
df_model <- df_cleaned %>%
select(-School_Type_Public, -Gender_Female, -Exam_Score, -Previous_Scores, -Previous_Scores_Category)
# Convertir 'Improved' a factor
df_model$Improved <- as.factor(df_model$Improved)
set.seed(42)
trainIndex <- createDataPartition(df_model$Improved, p = 0.7, list = FALSE)
trainData <- df_model[trainIndex, ]
testData <- df_model[-trainIndex, ]
# Verificar distribución de clases
prop.table(table(trainData$Improved))
prop.table(table(testData$Improved))
# Submuestreo de la clase mayoritaria
set.seed(42)
trainData_balanced <- downSample(x = trainData %>% select(-Improved), y = trainData$Improved)
# Verificar nueva distribución
table(trainData_balanced$Class)
# Configurar control de entrenamiento
control <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
# Entrenar el modelo Random Forest
set.seed(42)
rf_model <- train(
Class ~ .,
data = trainData_balanced,
method = "rf",
trControl = control,
importance = TRUE,
ntree = 500
)
# Realizar predicciones
predictions <- predict(rf_model, newdata = testData)
# Ver matriz de confusión
conf_mat <- confusionMatrix(predictions, testData$Improved, positive = "1")
# Mostrar resultados
print(conf_mat)
# Realizar predicciones
predictions <- predict(rf_model, newdata = testData)
# Ver matriz de confusión
conf_mat <- confusionMatrix(predictions, testData$Improved, positive = "1")
# Mostrar resultados
print(conf_mat)
# Calcular probabilidades de predicción
prob_predictions <- predict(rf_model, newdata = testData, type = "prob")
# Calcular AUC
library(pROC)
roc_obj <- roc(testData$Improved, prob_predictions[, "1"])
auc_value <- auc(roc_obj)
print(paste("AUC:", auc_value))
# Graficar la curva ROC
plot.roc(roc_obj, main = "Curva ROC - Random Forest")
# Importancia de variables
var_imp <- varImp(rf_model)
plot(var_imp, top = 11, main = "Importancia de Variables")
# Instalar paquetes si no están instalados
if (!require("rpart")) install.packages("rpart", dependencies=TRUE)
if (!require("rpart.plot")) install.packages("rpart.plot", dependencies=TRUE)
if (!require("caret")) install.packages("caret", dependencies=TRUE)
# Cargar las librerías necesarias
library(rpart)
library(rpart.plot)
library(caret)
# Definir las variables más importantes según análisis previo
important_vars <- c("Attendance", "Teacher_Quality", "Hours_Studied",
"Parental_Involvement", "Peer_Influence",
"Tutoring_Sessions", "Distance_from_Home", "Motivation_Level",
"Internet_Access", "Parental_Education_Level", "Extracurricular_Activities")
# Definir la variable objetivo y las variables predictoras
X <- df_cleaned[, important_vars]
y <- df_cleaned$Improved
# Dividir en conjunto de entrenamiento (70%) y prueba (30%)
set.seed(42)
trainIndex <- createDataPartition(y, p = 0.7, list = FALSE)
trainData <- df_cleaned[trainIndex, ]
testData  <- df_cleaned[-trainIndex, ]
# Entrenar el Árbol de Decisión con hiperparámetros ajustados
tree_model <- rpart(Improved ~ .,
data = trainData[, c(important_vars, "Improved")],
method = "class",
control = rpart.control(cp = 0.001, minsplit = 5, maxdepth = 8))
# Hacer predicciones con los datos de prueba
tree_pred <- predict(tree_model, newdata = testData, type = "class")
# Calcular precisión del modelo
tree_accuracy <- mean(tree_pred == testData$Improved)
# Crear matriz de confusión
tree_conf_matrix <- table(Predicho = tree_pred, Real = testData$Improved)
# Imprimir resultados
print(paste("Precisión del Árbol Mejorado:", round(tree_accuracy * 100, 2), "%"))
print("Matriz de Confusión:")
print(tree_conf_matrix)
# Visualizar el Árbol de Decisión Optimizado con mejores ajustes
rpart.plot(tree_model,
type = 2,  # Mostrar etiquetas en nodos
extra = 104,  # Mostrar porcentaje de datos en cada nodo
box.palette = "RdYlGn",  # Mejores colores para diferenciar clases
tweak = 0.5,  # Ajustar tamaño del árbol
cex = 0.65,  # Reducir tamaño de fuente para evitar sobrecarga
fallen.leaves = TRUE,  # Mejor alineación de nodos terminales
main = "Árbol de Decisión Optimizado con Variables Clave")
print(tree_model)
# Función para extraer las reglas del árbol
extract_rules <- function(tree_model) {
path <- path.rpart(tree_model, nodes = as.numeric(row.names(tree_model$frame)))
return(path)
}
# Aplicar la función y mostrar reglas
rules <- extract_rules(tree_model)
rules
# Cargar librerías necesarias
library(rpart)
library(rpart.plot)
library(ggplot2)
library(gganimate)
library(dplyr)
library(gifski)
library(tibble)
library(forcats)
# Asumiendo que 'tree_model' y 'testData' están disponibles
# Y que 'testData' contiene la variable 'Improved' (1 si mejoró, 0 si no)
# 1️⃣ Añadir un identificador único para cada estudiante
testData <- testData %>% mutate(id = 1:nrow(testData))
# 2️⃣ Asegurarse de que 'Improved' es una variable categórica con etiquetas
testData <- testData %>%
mutate(
Improved = factor(Improved, levels = c(0, 1), labels = c("No mejoró", "Mejoró"))
)
# 3️⃣ Asignar a cada fila del dataset su etapa en el árbol
assign_tree_steps <- function(data) {
data %>%
mutate(
step = case_when(
Attendance < 79.5 ~ "Paso 1: Attendance < 79.5%",
Attendance >= 79.5 & Parental_Involvement < 2.5 ~ "Paso 2: Parental_Involvement < 2.5",
Attendance >= 79.5 & Parental_Involvement >= 2.5 & Hours_Studied < 29.5 ~ "Paso 3: Hours_Studied < 29.5",
Attendance >= 79.5 & Parental_Involvement >= 2.5 & Hours_Studied >= 29.5 ~ "Paso 4: Hours_Studied >= 29.5",
TRUE ~ "Paso 5: Decisión Final"
),
# Ordenar las etapas correctamente
step = factor(step, levels = c(
"Paso 1: Attendance < 79.5%",
"Paso 2: Parental_Involvement < 2.5",
"Paso 3: Hours_Studied < 29.5",
"Paso 4: Hours_Studied >= 29.5",
"Paso 5: Decisión Final"
))
)
}
testData_animated <- assign_tree_steps(testData)
# 4️⃣ Definir colores para cada etapa y shapes para 'Improved'
color_mapping <- c(
"Paso 1: Attendance < 79.5%" = "#E41A1C",     # Rojo
"Paso 2: Parental_Involvement < 2.5" = "#377EB8", # Azul
"Paso 3: Hours_Studied < 29.5" = "#4DAF4A",   # Verde
"Paso 4: Hours_Studied >= 29.5" = "#984EA3",  # Morado
"Paso 5: Decisión Final" = "#FF7F00"          # Naranja
)
shape_mapping <- c("No mejoró" = 21, "Mejoró" = 24)
# 5️⃣ Crear la animación
animated_plot <- ggplot(testData_animated, aes(x = Attendance, y = Hours_Studied, group = id)) +
geom_point(aes(color = step, shape = Improved, fill = Improved), size = 3, alpha = 0.8) +
scale_color_manual(values = color_mapping, name = "Etapa del Árbol") +
scale_shape_manual(values = shape_mapping, name = "Mejora") +
scale_fill_manual(values = c("No mejoró" = "white", "Mejoró" = "black"), name = "Mejora") +
labs(
title = "Evolución de las Decisiones en el Árbol de Decisión",
subtitle = "Etapa: {closest_state}",
x = "Asistencia (%)",
y = "Horas de Estudio por Semana"
) +
theme_minimal(base_size = 14) +
transition_states(
step,
transition_length = 4,
state_length = 1,
wrap = FALSE
) +
ease_aes('quadratic-in-out')
# 6️⃣ Guardar la animación como GIF
animate(
animated_plot,
width = 800,
height = 600,
duration = 12,
fps = 20,
renderer = gifski_renderer()
)
anim_save("arbol_decision_animado.gif")
---
title: "Students Performance Factors"
# Students Performance Factors
